// Code generated by mockery v2.53.4. DO NOT EDIT.

package redis

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	v9 "github.com/redis/go-redis/v9"
)

// MockRedisClient is an autogenerated mock type for the RedisClient type
type MockRedisClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) Get(ctx context.Context, key string) *v9.StringCmd {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v9.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v9.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v9.StringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, ttl
func (_m *MockRedisClient) Set(ctx context.Context, key string, value interface{}, ttl time.Duration) *v9.StatusCmd {
	ret := _m.Called(ctx, key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *v9.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v9.StatusCmd); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v9.StatusCmd)
		}
	}

	return r0
}

// NewMockRedisClient creates a new instance of MockRedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisClient {
	mock := &MockRedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
